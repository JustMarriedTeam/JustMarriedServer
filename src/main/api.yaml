swagger: '2.0'
basePath: /api
schemes:
  - http
info:
  version: "1.0.0"
  title: JustMarried API

securityDefinitions:
  bearer:
    type: apiKey
    name: token
    in: header

paths:

  /ping:
      get:
        description: |
          An easiest call to the server.
        responses:
          200:
              description: Successfully communicated with the server.


  /auth/token:
      get:
        description: |
          Returns a new authentication token for an authorized user.
        security:
          - bearer: []
        responses:
          200:
              description: Account with token to use in the header
              schema:
                $ref: '#/definitions/Account'

  /auth/local:
      post:
        description: |
          Authenticates a user locally using login and password
          returning a valid token if authenticated positively.
        parameters:
          - name: credentials
            in: body
            description: Credentials to use in login attempt.
            required: true
            schema:
              $ref: '#/definitions/Credentials'
        responses:
          200:
              description: Account with token to use in the header
              schema:
                $ref: '#/definitions/Account'

  /auth/facebook.authentication:
      get:
        description: |
          Tries to get a authentication response from Facebook
          resulting in returning a response with authentication token.
        responses:
          200:
              description: Successful response

  /auth/facebook.authorization:
    get:
      security:
          - bearer: []
      description: |
        Tries to get a authorization response from Facebook
        resulting in merging facebook account details into user account.
      responses:
        200:
            description: Successful response

  /auth/facebook/callback:
      get:
        description: |
          Authentication callback to use for Facebook when authentity is verified.
        responses:
          200:
              description: Account with token to use in the header
              schema:
                $ref: '#/definitions/Account'

  /auth/google.authentication:
      get:
        description: |
          Tries to get a authentication response from Google
          resulting in returning a response with authentication token.
        responses:
          200:
              description: Successful response

  /auth/google.authorization:
    get:
      security:
          - bearer: []
      description: |
        Tries to get a authorization response from Google
        resulting in merging facebook account details into user account.
      responses:
        200:
            description: Successful response

  /auth/google/callback:
      get:
        description: |
          Authentication callback to use for Google when authentity is verified.
        responses:
          200:
              description: Account with token to use in the header
              schema:
                $ref: '#/definitions/Account'

  /accounts:
    get:
      security:
        - bearer: []
      description: |
        Get the account of acting user
      responses:
          200:
              description: The account of acting user
              schema:
                $ref: '#/definitions/Account'
    post:
      description: |
        Creates a new local account
      parameters:
        - name: account
          in: body
          required: true
          schema:
            $ref: '#/definitions/Account'
      responses:
          200:
              description: Newly created account with token to use in the header
              schema:
                $ref: '#/definitions/Account'


  /tasks:
    get:
      description: |
        Gets a list of generic tasks to use as a template
      security:
          - bearer: []
      responses:
        200:
          description: List of `Task`s matching the criteria specified
          schema:
            $ref: '#/definitions/Tasks'

  /wedding:

    get:
       description: |
        Gets a wedding.
       security:
          - bearer: []
       responses:
        200:
          description: A wedding of currently logged user
          schema:
            $ref: '#/definitions/Wedding'

    put:
       description: |
        Updates a wedding.
       security:
          - bearer: []
       parameters:
        - name: wedding
          in: body
          required: true
          schema:
            $ref: '#/definitions/Wedding'
       responses:
        200:
          description: A updated wedding
          schema:
            $ref: '#/definitions/Wedding'


  /wedding/tasks:
    get:
      description: |
        Gets list of `Task`s matching given query parameters.
      security:
          - bearer: []
      responses:
        200:
          description: List of `Task`s matching the criteria specified
          schema:
            $ref: '#/definitions/Tasks'

    post:
      description: |
        Creates a new `Task`
      security:
        - bearer: []
      parameters:
        - name: task
          in: body
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        200:
          description: The newly created `Task`
          schema:
            $ref: '#/definitions/Task'

  /wedding/tasks/{taskId}:
    put:
      description: |
        Updates an existing `Task`
      security:
        - bearer: []
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
        - name: task
          in: body
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        200:
          description: The updated `Task`
          schema:
            $ref: '#/definitions/Task'

    delete:
      description: |
        Deletes an existing `Task`
      security:
        - bearer: []
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
      responses:
        200:
          description: Task has been deleted.



definitions:

  Credentials:
    required:
      - login
      - password
    properties:
      login:
        type: string
      password:
        type: string

  Account:
    required:
      - login
      - password
    properties:
      login:
        type: string
      password:
        type: string
      user:
        $ref: '#/definitions/User'

  User:
    properties:
      _id:
        type: integer
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string

  Participant:
    properties:
      role:
        type: string
      user:
        $ref: '#/definitions/User'

  Task:
    properties:
      name:
        type: string
      status:
        type: string
      description:
        type: string
      deadlineDate:
        type: string
        format: date-time
      completionDate:
        type: string
        format: date-time
      dependingOn:
        type: array
        items:
          type: string
      requiredFor:
        type: array
        items:
          type: string

  Wedding:
    properties:
      _id:
        type: integer
      name:
        type: string
      description:
        type: string
      participants:
        type: array
        items:
          - $ref: '#/definitions/Participant'
      guests:
        type: array
        items:
          - $ref: '#/definitions/User'
      tasks:
        type: array
        items:
          - $ref: '#/definitions/Task'

  Tasks:
    type: array
    items:
      - $ref: '#/definitions/Task'

